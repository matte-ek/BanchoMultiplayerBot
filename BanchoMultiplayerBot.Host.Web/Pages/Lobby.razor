@implements IDisposable
@inject BotService Bot
@inject NavigationManager NavManager
@inject IDialogService DialogService
@page "/lobby/{IdStr}"
@using BanchoMultiplayerBot
@using BanchoMultiplayerBot.Behaviour
@using BanchoMultiplayerBot.Config
@using BanchoMultiplayerBot.Extensions;
@using BanchoMultiplayerBot.Host.Web.Pages.Dialogs;
@using BanchoSharp.EventArgs
@using BanchoSharp.Interfaces
@using BanchoSharp.Multiplayer
@using BanchoMultiplayerBot.Host.Web.Models

<PageTitle>Lobby</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">@_lobby?.Configuration.Name</MudText>

@if (_lobby?.IsParted == true)
{
    <MudAlert Severity="Severity.Error">This lobby has been removed by Bancho.</MudAlert>
}

<MudPaper Class="pa-4 mt-2 d-flex align-content-center flex-grow-1 gap-2">
    <MudButton Variant="Variant.Text" Color="Color.Primary" DisableElevation="true" OnClick="OnConfigureButtonClicked">Configure</MudButton>
    

    @if (_lobby?.IsParted == true)
    {
        <MudButton Variant="Variant.Text" Color="Color.Success" DisableElevation="true" OnClick="OnRecreateLobbyButtonClicked">Recreate Lobby</MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Text" Color="Color.Error" DisableElevation="true" OnClick="OnExitLobbyButtonClicked">Leave Lobby</MudButton>
    }
    
    <div style="margin-left: auto; margin-right: 0;align-items: center;line-height: 38px">
        <MudText Typo="Typo.button">@(_lobby != null && _lobby.MultiplayerLobby.MatchInProgress ? "IN PROGRESS" : "")</MudText>
    </div>
</MudPaper>
<MudGrid Class="mt-0">
    <MudItem xs="12" sm="6">
        <MudCard>
            <MudCardContent Style="@($"background-image: linear-gradient(to bottom, rgba(0,0,0,0.8) 0%,rgba(0,0,0,0.6) 100%), url(https://assets.ppy.sh/beatmaps/{_mapManager?.CurrentBeatmap?.SetId}/covers/cover.jpg);background-position: center;background-size: cover;")">
                <MudText Typo="Typo.body2">Beatmap</MudText>
                <MudLink Href="@($"https://osu.ppy.sh/b/{_mapManager?.CurrentBeatmap?.Id}")" Typo="Typo.h5" Color="Color.Default">@_mapManager?.CurrentBeatmap?.Name</MudLink>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Players</MudText>
                <MudText Typo="Typo.h5">@_lobby?.MultiplayerLobby.Players.Count/@_lobby?.Configuration.Size</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Host</MudText>
                <MudText Typo="Typo.h5">@_lobby?.MultiplayerLobby.Host?.Name</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
<MudGrid>
        <MudItem xs="12" sm="6">
        <MudPaper Height="440px">
            <MudPaper Class="pa-2 ma-0" MaxHeight="440px" Style="overflow: auto;display: flex;flex-direction: column-reverse;" Elevation="0">
                @foreach (var message in _chatMessages)
                {
                    <div class="d-flex flex-row flex-grow-1 gap-1">
                        <MudText Typo="Typo.body2" Style="color: #919191;white-space: nowrap;">@message.Time.AddHours(1).ToString("HH:mm:ss")</MudText>
                        <MudText Typo="Typo.body2" Style="white-space: nowrap;" Color="@message.Color"><b>@message.Author</b></MudText>
                        <MudText Typo="Typo.body2">@message.Content</MudText>
                    </div>
                }
            </MudPaper>
        </MudPaper>
        <MudPaper>
            <EditForm Model="@_sendMessageModel" OnValidSubmit="OnValidSubmit">
                <MudTextField T="string" Label="Send message..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send"  Variant="Variant.Outlined" @bind-Value="_sendMessageModel.Message" TextUpdateSuppression="false" />
            </EditForm>

        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Height="500px">
            <MudPaper Class="pa-2 ma-0" MaxHeight="500px" Style="overflow: auto;" Elevation="0">
                @if (_lobby != null)
                {
                    @foreach (var player in _lobby.MultiplayerLobby.Players)
                    {
                        <MudPaper Class="d-flex align-content-center flex-grow-1 gap-2 ma-1" Elevation="0" Height="48" Width="-1">
                            <MudImage src="@($"http://s.ppy.sh/a/{player.Id ?? 1}")" Width="48" Height="48" Elevation="25" Class="rounded-lg"/>
                            <div style="align-items: center;line-height: 48px;">
                                <MudLink Href="@($"https://osu.ppy.sh/users/{player.Id ?? 1}")" Typo="Typo.body2" Color="Color.Default" Style="">@player.Name</MudLink> 
                            </div>
                            <div style="margin-left: auto; margin-right: 0;">

                            @if (_lobby?.MultiplayerLobby?.Host is not null)
                            {
                                @if (_lobby.MultiplayerLobby.Host == player)
                                {
                                        <MudIcon Icon="@Icons.Material.Filled.Groups" />
                                }
                            }

                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                <MudMenuItem OnClick="(() => OnTransferHostButtonPressed(player))">Transfer Host</MudMenuItem>
                                <MudMenuItem OnClick="(() => OnKickPlayerButtonPressed(player))" Style="color: #f64e62ff;">Kick</MudMenuItem>
                                <MudMenuItem OnClick="(() => OnBanPlayerButtonPressed(player))" Style="color: #f64e62ff;">Ban</MudMenuItem>
                            </MudMenu>
                        </div>
                        </MudPaper>
                    }
                }
            </MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>

@code 
{
    [Parameter]
    public string? IdStr { get; set; }

    private readonly List<MessageModel> _chatMessages = new();

    private BanchoMultiplayerBot.Lobby? _lobby;
    private MapManagerBehaviour? _mapManager;

    private SendMessageModel _sendMessageModel = new();

    public void OnValidSubmit()
    {
        if (_sendMessageModel.Message != null && _sendMessageModel.Message.Any())
        {
            _lobby?.SendMessage(_sendMessageModel.Message);           
            Console.WriteLine(_sendMessageModel.Message);

            _sendMessageModel.Message = "";

            StateHasChanged();
        }
    }

    private void OnConfigureButtonClicked()
    {
        NavManager.NavigateTo($"/osu-bot/lobby/{IdStr}/configure");
    }

    private async void OnRecreateLobbyButtonClicked()
    {
        NavManager.NavigateTo("");
        
        if (_lobby != null) 
            await Bot.RecreateLobby(_lobby);
        
        UpdatePage();
    }
    
    private async void OnExitLobbyButtonClicked()
    {
        var parameters = new DialogParameters { ["Message"] = "Are you sure you want to exit the lobby?" };
        var dialog = DialogService.Show<ConfirmDialog>("ConfirmDialog", parameters);
        var result = await dialog.Result;

        if (result.Cancelled)
            return;

        NavManager.NavigateTo($"");

        if (_lobby != null)
            Bot.RemoveLobby(_lobby);

        UpdatePage();
    }

    private void OnTransferHostButtonPressed(MultiplayerPlayer player)
    {
        var autoHostRotateBehaviour = (AutoHostRotateBehaviour?)_lobby?.Behaviours.Find(x => x.GetType() == typeof(AutoHostRotateBehaviour));

        if (autoHostRotateBehaviour == null)
        {
            return;
        }

        autoHostRotateBehaviour.SetNewHost(player);
    }

    private void OnKickPlayerButtonPressed(MultiplayerPlayer player)
    {
        _lobby?.SendMessage($"!mp kick {player.Name.ToIrcNameFormat()}");
    }

    private void OnBanPlayerButtonPressed(MultiplayerPlayer player)
    {
        // I kind of want to implement some sort of confirmation here before banning someone.
    }

    private async void UpdatePage()
    {
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private void OnHostUpdatedOrPlayerJoined(MultiplayerPlayer host)
    {
        UpdatePage();
    }

    private void OnPlayerDisconnected(PlayerDisconnectedEventArgs args)
    {
        UpdatePage();
    }

    private async void OnChatMessage(IPrivateIrcMessage message)
    {
        if (message.Recipient != _lobby?.MultiplayerLobby.ChannelName)
            return;

        await InvokeAsync(() =>
        {
            AddChatMessage(message);
            StateHasChanged();
        }).ConfigureAwait(false);
    }

    private void OnNewAllowedMap()
    {
        UpdatePage();
    }

    protected override void OnParametersSet()
    {
        Dispose();
        OnInitialized();
    }

    protected override void OnInitialized()
    {
        _chatMessages.Clear();

        ParseIdParameter();

        if (_lobby == null)
        {
            return;
        }

        // Fill out any previous messages
        foreach (var msg in _lobby.RecentMessages)
        {
            AddChatMessage(msg);
        }

        _mapManager = (MapManagerBehaviour)_lobby.Behaviours.Find(x => x.GetType() == typeof(MapManagerBehaviour))!;

        // Register events
        _mapManager.OnNewAllowedMap += OnNewAllowedMap;

        _lobby.MultiplayerLobby.OnHostChanged += OnHostUpdatedOrPlayerJoined;
        _lobby.MultiplayerLobby.OnPlayerJoined += OnHostUpdatedOrPlayerJoined;
        _lobby.MultiplayerLobby.OnPlayerDisconnected += OnPlayerDisconnected;

        Bot.Client.OnPrivateMessageReceived += OnChatMessage;
        Bot.Client.OnPrivateMessageSent += OnChatMessage;

        // Update page with new info
        UpdatePage();
    }

    private void AddChatMessage(IPrivateIrcMessage message)
    {
        if (_chatMessages.Count >= 600)
            _chatMessages.RemoveAt(_chatMessages.Count - 1);

        var messageColor = Color.Default;

        if (message.Sender == Bot.Configuration.Username)
            messageColor = Color.Info;
        if (message.IsBanchoBotMessage)
            messageColor = Color.Secondary;

        var messageHistory = new MessageModel()
        {
            Time = message.Timestamp,
            Author = message.Sender,
            Content = message.Content,
            Color = messageColor
        };

        _chatMessages.Insert(0, messageHistory);
    }

    public void Dispose()
    {
        if (_lobby != null)
        {
            _lobby.MultiplayerLobby.OnHostChanged -= OnHostUpdatedOrPlayerJoined;
            _lobby.MultiplayerLobby.OnPlayerJoined -= OnHostUpdatedOrPlayerJoined;
            _lobby.MultiplayerLobby.OnPlayerDisconnected -= OnPlayerDisconnected;
        }
        
        if (_mapManager != null) 
            _mapManager.OnNewAllowedMap -= OnNewAllowedMap;
        
        Bot.Client.OnPrivateMessageReceived -= OnChatMessage;
        Bot.Client.OnPrivateMessageSent -= OnChatMessage;
    }
    
    private void ParseIdParameter()
    {
        if (IdStr == null || !int.TryParse(IdStr, out int lobbyId))
        {
            throw new Exception("Invalid lobby id");
        }

        _lobby = Bot.Lobbies[lobbyId];
    }
}